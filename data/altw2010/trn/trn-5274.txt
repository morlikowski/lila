El llenguatge de programació '''awk''' és un llenguatge interpretat especialment dissenyat per al tractament de fitxers de text (o text procedent d'un filtre o ''pipe''). El nom del llenguatge ve de les inicials del cognoms dels seus tres autors originals: Aho, Weinberger i Kernighan; a la pràctica el nom es pren pel nom en anglès de l'alca (un ocell àrtic), per exemple tal com apareix a la portada del llibre de referència ''The AWK Programming Language''. 

L'awk fa servir strings, expressions regulars (''regexp''),  i arrays associatius (''hash''). Incorpora tot de conceptes implícits com el bucle principal d'entrada, delimitador de camp i delimitador de registre, ''parsing'' automàtic de camps, obrir i tancar fitxers, etc. Això facilita la creació de programes molt compactes d'una sola línia.

L'awk és l'antecessor directe del perl, i tot i que és un llenguatge força senzill, resulta molt potent i ràpid per al tractament de fitxers de text. L'intérpret d'awk demana molt pocs recursos al sistema, i la càrrega i interpretació del programa és més ràpida que amb un intérpret de perl (és clar que aquest altre pot fer moltes altres coses com accedir a una base de dades o establir connexions de xarxa).

L'awk és una utilitat present en qualsevol entorn unix estàndard. Existeixen implementacions d'awk per a gairebé tots els sistemes operatius (unix, linux, ms-windows, hp-mpe, etc). Existeix una versió gnu anomenada gawk, que incorpora algunes interessants extensions al llenguatge estàndard.

== Estructura típica d'un programa awk ==

Un programa awk típic és una sèrie de regles que especifiquen què cal fer amb el text d'entrada.

Cada regla típicament és una parella de condició (opcionalment delimitada entre () o parèntesis) i d'acció (delimitada entre {} o claus). Encara que una regla pot tenir només la condició (llavors s'aplica l'acció per defecte que és llistar el mateix registre de l'entrada a la sortida) o només l'acció (llavors s'aplica la condició per defecte que és aplicar l'acció sempre per a tots els registres de l'entrada). 

Per exemple:

  /hola/   # llista totes les ratlles que contenen "hola"

  { print length($0) }   # llista llargada en caràcters de cada ratlla llegida

  /hola/ { print length($0) }  # llista llargada en caràcters de les ratlles que contenen "hola"

Un programa awk pot incloure regles de dues menes de condicions especials: 
* BEGIN: regles que s'apliquen abans de començar a llegir l'entrada
* END: regles que s'apliquen després d'acabar de llegir l'entrada

Per exemple:

  /hola/ { quantes++ } # compta ratlles que contenen "hola"
  END { print 0+quantes } # llista el comptador al final

== Sintaxi ==

El format del codi awk és força lliure.

Cada sentència ve separada en una ratlla (ratlles cabades en \n (salt de línia). 
Per partir una sentència llarga i continuar-la en una altra ratlla cal acabar la ratlla partida 
amb un caràcter \ (antibarra o ''backslash''). 
Per incloure més d'una sentència en una mateixa ratlla, es poden separar amb ; (punt-i-coma).
El text a la dreta d'un # (sostingut o ''hash'') es considera un comentari i és ignorat per l'intèrpret.

== Tipus de dades, constants i variables, expressions ==

* ...
* ... constants numèriques
* El text d'una constant string està delimitat entre "" (dobles cometes).
* El text d'una constant expressió regular està delimitat entre // (barres).
* ... variables predefinides

{{Infobox programming language
|name = AWK
|paradigm = procedural, event-driven
|year =  1977, last revised 1985, current POSIX edition is [http://www.opengroup.org/onlinepubs/000095399/utilities/awk.html IEEE Std 1003.1-2004]
|designer = Alfred '''A'''ho, Peter '''W'''einberger, and Brian '''K'''ernighan
|typing = none; can handle strings, integers and floating point numbers; regular expressions
|implementations = awk, GNU Awk, mawk, nawk, MKS AWK, Thompson AWK (compiler), Awka (compiler)
|dialects = ''old awk'' oawk 1977, ''new awk'' nawk 1985, GNU Awk
|influenced_by = C, SNOBOL4, Bourne shell
|influenced = JavaScript
|operating_system = Cross-platform
|website =[http://cm.bell-labs.com/cm/cs/awkbook/index.html cm.bell-labs.com/cm/cs/awkbook/index.html]
}}

'''AWK''' is a general purpose Alfred '''A'''ho, Peter '''W'''einberger, and Brian '''K'''ernighan; however, it is not commonly pronounced as a string of separate letters but rather to sound the same as the name of the bird, Plan 9 program that runs other programs written in the AWK programming language.

AWK is an example of a string datatype, associative arrays (that is, arrays indexed by key strings), and regular expressions. The power, terseness, and limitations of AWK programs and sed scripts inspired Larry Wall to write Perl. Because of their dense notation, all these languages are often used for writing one-liner programs.

AWK is one of the early tools to appear in pipeline.
A version of the AWK language is a standard feature of nearly every modern Unix-like operating system available today. AWK is mentioned in the Single UNIX Specification as one of the mandatory utilities of a Unix operating system. Besides the Bourne shell, AWK is the only other scripting language available in a standard Unix environment<ref>[http://www.unix.org/version3/apis/cu.html The Single UNIX Specification, Version 3, Utilities Interface Table]</ref>. Implementations of AWK exist as installed software for almost all other operating systems.

==Structure of AWK programs==

An AWK program is a series of pattern action pairs, written as:

 ''pattern'' { ''action'' }

where ''pattern'' is typically an expression and ''action'' is a series of commands.
Each line of input is tested against all the patterns in turn and the ''action'' is executed for each expression that is true.
Either the ''pattern'' or the ''action'' may be omitted.
The ''pattern'' defaults to matching every line of input.
The default ''action'' is to print the line of input.

In addition to a simple AWK expression, the ''pattern'' can be ''BEGIN'' or ''END'' causing the ''action'' to be executed before or after all lines of input have been read, or ''pattern1, pattern2'' which matches the range of lines of input starting with a line that matches ''pattern1'' up to and including the line that matches ''pattern2'' before again trying to match against ''pattern1'' on future lines.

In addition to normal arithmetic and logical operators,
AWK expressions include the tilde operator, ''~'', which matches a regular expression against a string.
As handy syntactic sugar, ''/regexp/'' without using the tilde operator matches against the current line of input.

==AWK commands==
AWK commands are the statement that is substituted for ''action'' in the examples above. AWK commands can include function calls, variable assignments, calculations, or any combination thereof. AWK contains built-in support for many functions; many more are provided by the various flavors of AWK. Also, some flavors support the inclusion of dynamically linked libraries, which can also provide more functions.

For brevity, the enclosing curly braces ( ''{ }'' ) will be omitted from these examples.

===The ''print'' command===
The ''print'' command is used to output text. The output text is always terminated with a predefined string called the output record separator (ORS) whose default value is a newline. The simplest form of this command is:

 print

This displays the contents of the current line. In AWK, lines are broken down into ''fields'', and these can be displayed separately:

; <tt>print $1</tt>
: Displays the first field of the current line
; <tt>print $1, $3</tt>
: Displays the first and third fields of the current line, separated by a predefined string called the output field separator (OFS) whose default value is a single space character

Although these fields (''$X'') may bear resemblance to variables (the $ symbol indicates variables in perl), they actually refer to the fields of the current line.  A special case, ''$0'', refers to the entire line.  In fact, the commands "<tt>print</tt>" and "<tt>print $0</tt>" are identical in functionality.

The ''print'' command can also display the results of calculations and/or function calls:

 print 3+2
 print foobar(3)
 print foobar(variable)
 print sin(3-2)

Output may be sent to a file:

 print "expression" > "file name"

or through a pipe:

 print "expression" | "command"

===Variables and Syntax===
Variable names can use any of the characters [A-Za-z0-9_], with the exception of language keywords. The operators ''+ - * /'' represent addition, subtraction, multiplication, and division, respectively. For string concatenation, simply place two variables (or string constants) next to each other. It is optional to use a space in between if string constants are involved. But you can't place two variable names adjacent to each other without having a space in between. String constants are delimited by double quotes. Statements need not end with semicolons. Finally, comments can be added to programs by using ''#'' as the first character on a line.

===User-defined functions===
In a format similar to C, function definitions consist of the keyword <tt>function</tt>, the function name, argument names and the function body.  Here is an example of a function.

 function add_three (number, temp) {
   temp = number + 3
   return temp
 }

This statement can be invoked as follows:

 print add_three(36)     # Outputs '''39'''

Functions can have variables that are in the local scope. The names of these are added to the end of the argument list, though values for these should be omitted when calling the function. It is convention to add some whitespace in the argument list before the local variables, in order to indicate where the parameters end and the local variables begin.

==Sample applications==
===Hello World===
Here is the ubiquitous "Hello world program" program written in AWK:

 BEGIN { print "Hello, world!" }

Note that you do not need an explicit <tt>exit</tt> statement, as since the only pattern is <tt>BEGIN</tt>, no command-line arguments are processed.

===Print lines longer than 80 characters===
Print all lines longer than 80 characters. Note that the default action is to print the current line.

 length > 80 

<i>The AWK Programming Language</i> now specifies an explicit $0 in the length function:

 length($0) > 80

===Print a count of words===
Count words in the input, and print lines, words, and characters (like wc)

 {
     w += NF
     c += length + 1
 }
 END { print NR, w, c }

As there is no pattern for the first line of the program, every line of input matches by default so the increment actions are executed for every line. Note that <tt>w += NF</tt> is shorthand for <tt>w = w + NF</tt>.

===Sum last word===

 { s += $NF }
 END { print s + 0 }

''s'' is incremented by the numeric value of ''$NF'' which is the last word on the line as defined by AWK's field separator, by default white-space. ''NF'' is the number of fields in the current line, e.g. 4. Since ''$4'' is the value of the fourth field, ''$NF'' is the value of the last field in the line regardless of how many fields this line has, or whether it has more or fewer fields than surrounding lines. $ is actually a unary operator with the highest operator precedence. (If the line has no fields then ''NF'' is 0, ''$0'' is the whole line, which in this case is empty apart from possible white-space, and so has the numeric value 0.)

At the end of the input the ''END'' pattern matches so ''s'' is printed. However, since there may have been no lines of input at all, in which case no value has ever been assigned to ''s'', it will by default be an empty string. Adding zero to a variable is an AWK idiom for coercing it from a string to a numeric value. (Concatenating an empty string is to coerce from a number to a string, e.g. ''s ""''.  Note, there's no operator to concatenate strings, they're just placed adjacently.) With the coercion the program prints ''0'' on an empty input, without it an empty line is printed.