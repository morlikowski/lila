'''Strukturerad programmering''' är GOTO-satser. Istället använder man endast de ''strukturerade'' kontrollflödes-mekanismerna som det använda programspråket erbjuder. Därmed undviks de problem som ostrukturerad spagettikod leder till. Många moderna programspråk omöjliggör ostrukturerad programmering genom att helt enkelt inte erbjuda någon explict GOTO-sats.

==Historia==
Den teoretiska grunden för strukturerad programmering lades i slutet av 1960-talet med ett teorem<ref>Böhm, Corrado; and Giuseppe Jacopini (May 1966). "Flow Diagrams, Turing Machines and Languages with Only Two Formation Rules". Communications of the ACM 9 (5)</ref> av Corrado Böhm och Giuseppe Jacopini där de visade att alla beräkningsbara funktioner kan implementeras med användning av endast tre grundläggande kontrollstrukturer:
# utför först en delfunktion och därefter en annan delfunktion. ('''sekvens''')
# utför en av två delfunktioner beroende på värdet av en boolesk variabel. ('''selection''')
# utför en delfunktion tills en boolesk variabel är sann. ('''iteration''')
Artikeln visad också hur ett godtyckligt, ostrukturerat, flödesschema kunde omformas till ett strukturerat schema med samma funktion. Edsger Dijkstra's berömda brev, "Go To Statement Considered Harmful" 1968<ref>Dijkstra, Edsger (1968). "Go To Statement Considered Harmful". Communications of the ACM 3</ref> blev sedan början till en debatt om huruvida strikt strukturerade program enligt Böhm och Jacopinis principer var användbara för realistiska verkliga problem. 

Efter viktiga praktiska tillägg till de ursprungliga tre mekanismerna under början av 1970-talet, t.ex. i form av kontrollerade uthopp ur iterationer, accepterades idéerna om strukturerad programmering allt mer och de kom att bli den dominerande paradigmen för programmering under 1970- och 1980-talet.

'''Structured programming''' can be seen as a subset or subdiscipline of statement.

Historically, several different structuring techniques or methodologies have been developed for writing structured programs.  The most common are:

# Dijkstra's structured programming, where the logic of a program is a structure composed of similar sub-structures in a limited number of ways. This reduces understanding a program to understanding each structure on its own, and in relation to that containing it, a useful separation of concerns.
# A view derived from Dijkstra's which also advocates splitting programs into sub-sections with a single point of entry, but is strongly opposed to the concept of a single point of exit.
# Data Structured Programming, which is based on aligning data structures with program structures. This approach applied the fundamental structures proposed by Dijkstra, but as constructs that used the high-level structure of a program to be modeled on the underlying data structures being processed. There are at least 3 major approaches to data structured program design proposed by Jean-Dominique Warnier, Michael A. Jackson, and Ken Orr.

The two latter meanings for the term "structured programming" are more common, and that is what this article will discuss.  Years after Dijkstra (1969), Object-oriented comparison'').

== Low-level structure ==
At a low level, structured programs are often composed of simple, hierarchical program flow structures. These are concatenation, selection, and repetition:

* "Concatenation" refers to a sequence of statements executed in order.

* In "selection" one of a number of statements is executed depending on the state of the program. This is usually expressed with keywords such as <code>if..then..else..endif</code>, <code>switch</code>, or <code>case</code>. 

* In "repetition" a statement is executed until the program reaches a certain state or operations are applied to every element of a collection.  This is usually expressed with keywords such as <code>while</code>, <code>repeat</code>, <code>for</code> or <code>do..until</code>.  Often it is recommended that each loop should only have one entry point (and in the original structural programming, also only one exit point), and a few languages enforce this.

Some languages, such as Dijkstra's original Guarded Command Language, emphasise the unity of these structures with a syntax which completely encloses the structure, as in <code>if..fi</code>.
In others, such as C, this is not the case, which increases the risk of misunderstanding and incorrect modification.

A language is described as "block-structured" when it has a syntax for enclosing structures between bracketed keywords, such as an if-statement bracketed by <code>if..fi</code> as in Ada, a block is a 4-pronged comb with keywords <code>DECLARE</code>, <code>BEGIN</code>, <code>EXCEPTION</code>, <code>END</code>, and the if-statement in Ada is a 4-pronged comb with keywords <code>IF</code>, <code>THEN</code>, <code>ELSE</code>, <code>END IF</code>.

== Design ==
Structured programming is often (but not always) associated with a "top-down" approach to design.

== Structured programming languages ==
It is possible to do structured programming in any programming language, though it is preferable to use something like a procedural Pascal, Ada.

==History==
===Theoretical foundation===
The structured program theorem provides the theoretical basis of structured programming. It states that three ways of combining programs&mdash;sequencing, selection, and iteration&mdash;are sufficient to express any computable function. This observation did not originate with the structured programming movement; these structures are sufficient to describe the instruction cycle of a central processing unit, as well as the operation of a Turing machine. Therefore a processor is always executing a "structured program" in this sense, even if the instructions it reads from memory are not part of a structured program. However, authors usually credit the result to a 1966 paper by Böhm and Jacopini, possibly because Dijkstra cited this paper himself. The structured program theorem does not address how to write and analyze a usefully structured program. These issues were addressed during the late 1960s and early 1970s, with major contributions by Dijkstra, Robert W. Floyd, Tony Hoare, and David Gries.

===Debate===
P. J. Plauger, an early adopter of structured programming, described his reaction to the structured program theorem:
:''Us converts waved this interesting bit of news under the noses of the unreconstructed assembly-language programmers who kept trotting forth twisty bits of logic and saying, 'I betcha can't structure this.' Neither the proof by Böhm and Jacopini nor our repeated successes at writing structured code brought them around one day sooner than they were ready to convince themselves.''

In 1967 a letter from Dijkstra appeared in ''Communications of the ACM'' with the heading "Goto statement considered harmful." The letter, which cited the Böhm and Jacopini proof, called for the abolishment of GOTO from high-level languages in the interest of improving code quality. This letter is usually cited as the beginning of the structured programming debate.

Although, as Plauger mentioned, many programmers unfamiliar with the theorem doubted its claims, the more significant dispute in the ensuing years was whether structured programming could actually improve software's clarity, quality, and development time enough to justify training programmers in it. Dijkstra claimed that limiting the number of structures would help to focus a programmer's thinking, and would simplify the task of ensuring the program's correctness by dividing analysis into manageable steps. In his 1969 ''Notes on Structured Programming'', Dijkstra wrote:

:''When we now take the position that it is not only the programmer's task to produce a correct program but also to demonstrate its correctness in a convincing manner, then the above remarks have a profound influence on the programmer's activity: the object he has to produce must be usefully structured.''

:''…In what follows it will become apparent that program correctness is not my only concern, program adaptability or manageability will be another…'' <sup>1</sup>

Donald Knuth accepted the principle that programs must be written with provability in mind, but he disagreed (and still disagrees) with abolishing the GOTO statement. In his 1974 paper, "Structured Programming with Goto Statements", he gave examples where he believed that a direct jump leads to clearer and more efficient code without sacrificing provability. Knuth proposed a looser structural constraint: It should be possible to draw a program's flow chart with all forward branches on the left, all backward branches on the right, and no branches crossing each other. Many of those knowledgeable in compilers and graph theory have advocated allowing only reducible flow graphs.

Structured programming theorists gained a major ally in the 1970s after IBM researcher Harlan Mills applied his interpretation of structured programming theory to the development of an indexing system for the ''New York Times'' research file. The project was a great engineering success, and managers at other companies cited it in support of adopting structured programming, although Dijkstra criticized the ways that Mills's interpretation differed from the published work.

As late as 1987 it was still possible to raise the question of structured programming in a computer science journal. Frank Rubin did so in that year with a letter, "'GOTO considered harmful' considered harmful." Numerous objections followed, including a response from Dijkstra that sharply criticized both Rubin and the concessions other writers made when responding to him.

===Outcome===
By the end of the 20th century nearly all computer scientists were convinced that it is useful to learn and apply the concepts of structured programming. High-level programming languages that originally lacked programming structures, such as FORTRAN, COBOL, and BASIC, now have them.